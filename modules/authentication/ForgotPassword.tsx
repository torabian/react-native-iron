import {NavigationProp, useNavigation} from '@react-navigation/native';
import {OtpAuthenticateDto} from 'fireback-tools/modules/passports';
import {usePassports} from 'fireback-tools/modules/passports/passport-react';
import {Formik, FormikHelpers, FormikProps} from 'formik';
import React, {useRef} from 'react';
import {StyleSheet, Text, TouchableOpacity, View} from 'react-native';
import {ErrorsView} from '~/components/error-view/ErrorView';
import {FormCodeField} from '~/components/form-code-field/FormCodeField';
import {FormPhone} from '~/components/form-phone/FormPhone';
import {FormText} from '~/components/form-text/FormText';
import colors from '~/constants/colors';
import t from '~/constants/t';
import {setSession} from '~/helpers/token';
import {Screens} from '~/stacks/Screens';
import UserIcon from '../../assets/icons/account.svg';
import {FormButton} from '../../components/form-button/FormButton';
import {CommonScrollForm} from './AuthComponents';
import {AuthConstants} from './Constants';
import {TimerUntil} from './TimerUntil';

const initialValues: OtpAuthenticateDto = {
  value: 'connexion.founder@outlook.com',
  otp: '',
  type: 'email',
};

enum TwoFactorState {
  Initial = 'initial',
  VerifyCode = 'verify',
}

export const ForgotPassword = () => {
  const formik = useRef<FormikProps<OtpAuthenticateDto> | null>();
  const navigation = useNavigation<NavigationProp<any>>();

  const goBack = () => {
    navigation.goBack();
  };

  let stage: TwoFactorState = TwoFactorState.Initial;

  const resetAll = () => {
    mutation.reset();
    formik.current?.resetForm();
  };

  // From fireback autogenerated content
  const {
    submitPostPassportRequestResetMailPassword: submit,
    mutationPostPassportRequestResetMailPassword: mutation,
  } = usePassports({
    options: {prefix: AuthConstants.url},
  });

  const onSubmit = (
    values: OtpAuthenticateDto,
    formikProps: FormikHelpers<OtpAuthenticateDto>,
  ) => {
    submit(values, formikProps).then(response => {
      if (response.data?.userSession) {
        setSession(response.data.userSession);
        navigation.navigate('app', {screen: Screens.Home});
      }
    });
  };

  stage =
    mutation.data || mutation.error
      ? TwoFactorState.VerifyCode
      : TwoFactorState.Initial;

  // Page logic
  const showEnterCode =
    mutation.error?.data ||
    mutation.data?.data ||
    stage === TwoFactorState.VerifyCode;

  const blockedUntil =
    mutation.error?.data?.request?.blockedUntil ||
    mutation.data?.data?.request?.blockedUntil;

  return (
    <CommonScrollForm title={'Forgot Password'}>
      <Formik
        innerRef={p => {
          if (p) formik.current = p;
        }}
        initialValues={initialValues}
        onSubmit={onSubmit}>
        {(formik: FormikProps<OtpAuthenticateDto>) => {
          const {setFieldValue, values} = formik;

          return (
            <>
              <Text style={styles.description}>
                Enter your email address, we will send a 6 digit code which will
                allow you to change your password
              </Text>

              <ErrorsView errors={formik.errors} />
              <View style={{paddingTop: 20}}></View>

              {values.type === 'email' ? (
                <FormText
                  value={formik.values.value}
                  label={t.email}
                  Icon={() => <UserIcon />}
                  onChange={value => setFieldValue('value', value)}
                  errorMessage={formik.errors.value}
                  keyboardType="email-address"
                  autoCapitalize={'none'}
                  disabled={stage === TwoFactorState.VerifyCode}
                  autoCorrect={false}
                  returnKeyType="next"
                  blurOnSubmit={false}
                />
              ) : null}

              {values.type === 'sms' || values.type === 'voice' ? (
                <FormPhone
                  value={values.value}
                  onChange={value => setFieldValue('value', value)}
                />
              ) : null}

              {stage !== TwoFactorState.Initial && (
                <TouchableOpacity onPress={resetAll}>
                  <Text style={styles.subAction}>
                    Or try a different account instead
                  </Text>
                </TouchableOpacity>
              )}

              {showEnterCode ? (
                <FormCodeField
                  value={values.otp}
                  onChange={value => setFieldValue('otp', value)}
                />
              ) : null}

              {blockedUntil && (
                <TimerUntil
                  onResend={() => formik.submitForm()}
                  until={blockedUntil}
                />
              )}

              <FormButton
                isSubmitting={mutation.isLoading}
                onPress={() => formik.submitForm()}
                style={styles.submit}
                label={
                  stage === TwoFactorState.Initial ? 'Send Code' : 'Verify'
                }
              />
              <FormButton onPress={goBack} type="secondary" label={'Go back'} />
            </>
          );
        }}
      </Formik>
    </CommonScrollForm>
  );
};

const styles = StyleSheet.create({
  submit: {
    marginTop: 30,
  },
  description: {
    marginBottom: 20,
    textAlign: 'center',
  },
  subAction: {
    textAlign: 'center',
    marginVertical: 20,
    color: colors.primaryColor,
  },
  emailPreview: {
    fontSize: 26,
    fontWeight: 'bold',
    letterSpacing: 2,
    textAlign: 'center',
  },
  secondsLeft: {
    marginTop: 10,
    textAlign: 'center',
  },
});
